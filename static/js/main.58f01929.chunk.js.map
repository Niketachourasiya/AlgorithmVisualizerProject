{"version":3,"sources":["components/node.jsx","components/grid.jsx","components/simpleSelect.jsx","components/navbar.jsx","components/menu.jsx","algorithms/dijkstra.js","components/window.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","static","row","props","col","this","onMouseDown","isVisited","onMouseEnter","onMouseUp","id","className","getClassName","isWall","node","isStartNode","isEndNode","visitedNode","Component","Grid","state","grid","map","rowidx","nodeidx","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","SimpleSelect","classes","React","useState","age","setAge","FormControl","InputLabel","Select","labelId","value","onChange","event","target","onAlgoChanged","MenuItem","style","selected","Navbar","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Menu","onClick","onVisualize","dijkstra","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","Window","handleMouseDown","endNode","newGrid","getNewGridWithWallToggled","setState","mouseIsPressed","handleMouseEnter","handleMouseUp","console","log","handleAlgoChanged","val","algo","handleClick","visualizeDijkstra","width","window","innerWidth","height","innerHeight","Math","max","floor","getInitialGrid","nodesInShortestPathOrder","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","i","setTimeout","animateShortestPath","toggleVisit","document","getElementById","slice","newNode","totRow","totCol","currentRow","createNode","ispathNode","App","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.58f01929.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './node.css'\r\nclass Node extends Component {\r\n    static = {\r\n        row: this.props.row,\r\n        col: this.props.col\r\n    }\r\n    render() {\r\n        const { row,col,isVisited, onMouseDown, onMouseEnter,onMouseUp } = this.props;\r\n        return (\r\n            <div\r\n                id = {`node-${this.props.row}-${this.props.col}`}\r\n                className={this.getClassName()}\r\n                onMouseDown={() => onMouseDown(row,col)}\r\n                onMouseEnter={() => onMouseEnter(row,col)}\r\n                onMouseUp={() => onMouseUp(row,col)}\r\n            />\r\n        );\r\n    }\r\n    getClassName(){\r\n        if(this.props.isWall === true){\r\n            return \"node node-wall\";\r\n        } else if( this.props.node.isStartNode === true ){\r\n            return \"node  node-start\";\r\n        } else if( this.props.node.isEndNode === true ){\r\n            return \"node  node-end\";\r\n        } else if( this.props.visitedNode === true ){\r\n            return \"node  node-visited\";\r\n        } else{\r\n            return \"node\";\r\n        }\r\n    }\r\n}\r\n\r\nexport default Node;","import React, {Component} from 'react';\r\nimport Node from \"./node\";\r\nimport './grid.css';\r\nclass Grid extends Component {\r\n    state = {\r\n        grid: this.props.grid\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Grid\">\r\n                {this.props.grid.map((row, rowidx) => {\r\n                    return (\r\n                        <div key={rowidx}>\r\n                            {row.map((node, nodeidx) => {\r\n                                const {row, col, isWall, visitedNode, } = node;\r\n                                return (\r\n                                    <Node\r\n                                        key={nodeidx}\r\n                                        row={row}\r\n                                        col={col}\r\n                                        node={node}\r\n                                        isWall={isWall}\r\n                                        visitedNode={ visitedNode }\r\n                                        onMouseDown = {this.props.onMouseDown}\r\n                                        onMouseEnter = {this.props.onMouseEnter}\r\n                                        onMouseUp = {this.props.onMouseUp}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Grid;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst SimpleSelect = (props) => {\r\n    const classes = useStyles();\r\n    const [age, setAge] = React.useState('1');\r\n\r\n    const handleChange = (event) => {\r\n        setAge(event.target.value);\r\n        props.onAlgoChanged(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Algorithm</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={age}\r\n                    onChange={handleChange}\r\n                >\r\n                    <MenuItem value={1} style={{selected:true}} >Djkstra</MenuItem>\r\n                    <MenuItem value={2}>BFS</MenuItem>\r\n                    <MenuItem value={3}>DFS</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SimpleSelect;","import React, {Component} from 'react';\r\nimport SimpleSelect from \"./simpleSelect\";\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <span className=\"navbar-brand\">Pathfinder</span>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n                        data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\r\n                        aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\" >\r\n\r\n                </div>\r\n\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, {Component} from 'react';\r\nimport SimpleSelect from \"./simpleSelect\";\r\n\r\nclass Menu extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"nav alert-dark\" >\r\n                <SimpleSelect\r\n                    onAlgoChanged = {this.props.onAlgoChanged}\r\n                />\r\n                <button\r\n                    onClick={this.props.onVisualize}\r\n                    className=\"btn btn-warning \">Visualize</button>\r\n\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, {Component, Fragment} from 'react';\r\nimport Grid from \"./grid\";\r\nimport Navbar from \"./navbar\";\r\nimport Menu from \"./menu\";\r\nimport {dijkstra,getNodesInShortestPathOrder} from \"../algorithms/dijkstra\";\r\n\r\nclass Window extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            grid:[],\r\n            mouseIsPressed:false,\r\n            algo:1\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        const row = Math.max(Math.floor(height/25)-7,10);\r\n        const col = Math.floor(width/25);\r\n        const startNode = {\r\n            row:5,\r\n            col:5\r\n        };\r\n        const endNode = {\r\n            row: row-5,\r\n            col: col-5\r\n        }\r\n        console.log( endNode.row );\r\n        const grid = getInitialGrid(row,col);\r\n        grid[5][5].isStartNode = true;\r\n        grid[row-5][col-5].isEndNode = true;\r\n        this.setState({grid,row,col,startNode,endNode});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Navbar/>\r\n\r\n                <Menu\r\n                    onAlgoChanged = {this.handleAlgoChanged}\r\n                    onVisualize = {this.handleClick}\r\n                />\r\n                <span style={{margin: 2}}/>\r\n                <Grid\r\n\r\n                    grid={this.state.grid}\r\n                    onMouseDown={this.handleMouseDown}\r\n                    onMouseEnter={this.handleMouseEnter}\r\n                    onMouseUp={this.handleMouseUp}\r\n                />\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    handleMouseDown = (row, col) => {\r\n        if((this.state.startNode.row!==row || this.state.startNode.col!==col) && (this.state.endNode.row!==row || this.state.endNode.col!==col) ){\r\n            const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n            this.setState({grid:newGrid});\r\n        }\r\n        this.setState({mouseIsPressed: true});\r\n    }\r\n\r\n    handleMouseEnter = (row, col) => {\r\n        if (this.state.mouseIsPressed === false) return;\r\n        if((this.state.startNode.row!==row || this.state.startNode.col!==col) && (this.state.endNode.row!==row || this.state.endNode.col!==col) ){\r\n            const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n            this.setState({grid:newGrid});\r\n        }\r\n    }\r\n\r\n    handleMouseUp = (row,col) => {\r\n        console.log(\"up mouse on\",row,col);\r\n        this.setState({mouseIsPressed: false});\r\n    }\r\n\r\n    handleAlgoChanged = (val) =>{\r\n        console.log(\"Algo Selected \",val);\r\n        this.setState({algo:val});\r\n    }\r\n\r\n    handleClick = () =>{\r\n      /*  for(let i = 0;i<20;i++){\r\n            for(let j = 0; j<50;j++){\r\n                document.getElementById(`node-${i}-${j}`).className = \"node\";\r\n            }\r\n        }*/\r\n        this.visualizeDijkstra();\r\n        /*for(let i = 0;i<this.state.row;i++){\r\n            for(let j = 0; j<this.state.col;j++){\r\n                setTimeout(()=>{\r\n                    const newGrid = toggleVisit(this.state.grid,i,j);\r\n                    this.setState({grid:newGrid});\r\n                    //document.getElementById(`node-${i}-${j}`).className = \"node node-visited\";\r\n                },100*(i+j)+j);\r\n            }\r\n        }*/\r\n    }\r\n\r\n    visualizeDijkstra() {\r\n        const {grid} = this.state;\r\n        const startNode = grid[this.state.startNode.row][this.state.startNode.col];\r\n        const finishNode = grid[this.state.endNode.row][this.state.endNode.col];\r\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    this.animateShortestPath(nodesInShortestPathOrder);\r\n                }, 10 * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodesInOrder[i];\r\n                const newGrid = toggleVisit(this.state.grid,node.row,node.col);\r\n                //this.setState({grid:newGrid});\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                    'node node-visited';\r\n            }, 10 * i);\r\n        }\r\n    }\r\n\r\n    animateShortestPath(nodesInShortestPathOrder) {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                    'node node-shortest-path';\r\n            }, 50 * i);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nconst toggleVisit = (grid,row,col) =>{\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        visitedNode: !node.visitedNode\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n}\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n    const newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isWall: true//!node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n};\r\nconst getInitialGrid = (totRow,totCol) => {\r\n    const grid = [];\r\n    for (let row = 0; row < totRow; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < totCol; col++) {\r\n            currentRow.push(createNode(row,col));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n}\r\n\r\nconst createNode = (row,col)=>{\r\n    return {\r\n        row,\r\n        col,\r\n        isWall: false,\r\n        isStartNode:false,\r\n        isEndNode:false,\r\n        distance:Infinity,\r\n        visitedNode: false,\r\n        isVisited:false,\r\n        ispathNode:false,\r\n        previousNode:null\r\n    };\r\n}\r\n\r\nexport default Window;","import React, {Component} from 'react';\nimport Window from \"./components/window\";\n\nclass App extends Component {\n    constructor() {\n        super();\n    }\n    componentDidMount() {\n        console.log(window.innerHeight,\"  \",window.innerWidth);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Window/>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}